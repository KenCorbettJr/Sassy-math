// SASSY MATH

// ref http://compass-style.org/reference/compass/helpers/trig/

@charset "UTF-8";

//////////////////////////////
// Variables
//////////////////////////////
$pi: 3.1415926535897932384626433832795028841971693993751;
$π: $pi;
$e: 2.71828182845904523536028747135266249775724709369995;

$rand: random number;

$iter: 10;

//////////////////////////////
// Percent
//////////////////////////////
@function percent($number) {
  @return $number * 0.01; 
}

//////////////////////////////
// Exponent
//////////////////////////////
@function exponent($base, $exponent) {
  // reset value
  $value: $base;
  // positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base; } }
  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base; } }
  // return the last value written
  @return $value; 
}

//////////////////////////////
// Factorial
//////////////////////////////
@function factorial($number) {
  // reset value
  $value: 1;
  // positive intergers get multiplied
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i; 
    } 
  }
  @return $value;
}

@function fact($number) {
  @return factorial($number); 
}


//////////////////////////////
// Taylor Series
//////////////////////////////
// Taylor series can be used to estimate Sine and Consine
@function taylor($start, $key, $number) {
  $value: $start;
  $add: 0;
  
  @for $i from 1 through $iter {
    @if $add == 0 {
      $value: $value - ( exponent($number, $key) / factorial($key) );
      $add: 1;
    }
    @else {
      $value: $value + ( exponent($number, $key) / factorial($key) );
      $add: 0;
    }
    
    $key: $key + 2;
  }
  
  @return $value;
}

//////////////////////////////
// Basic Trig Functions
//////////////////////////////
@function sin($number) {
  @return taylor($number, 3, $number);
}

@function cos($number) {
  @return taylor(1, 2, $number);
}

// Trig Identity: Tangent = Sine divided by Cosine.
@function tan($number) {
  @return sin($number) / cos($number); 
}

//////////////////////////////
// Reciprocal Trig Functions
//////////////////////////////
@function csc($number) {
  @return 1 / sin($number);
}

@function scs($number) {
  @return 1 / cos($number);
}

@function cot($number) {
  @return 1 / tan($number);
}

//////////////////////////////
// Hyperbolic Functions
//////////////////////////////
@function sinh($number) {
  $top: exponent($e, (2 * $number)) - 1;
  $bottom: 2 * exponent($e, $number);
  @return  $top / $bottom;
}

@function cosh($number) {
  $top: exponent($e, (2 * $number)) + 1;
  $bottom: 2 * exponent($e, $number);
  @return  $top / $bottom;
}

@function tanh($number) {
  $top: exponent($e, (2 * $number)) - 1;
  $bottom: exponent($e, (2 * $number)) + 1;
  @return  $top / $bottom;
}

//////////////////////////////
// Reciprocal Hyperbolic Functions
//////////////////////////////
@function csch($number) {
  @return 1 / sinh($number);
}

@function sech($number) {
  @return 1 / cosh($number);
}

@function coth($number) {
  @return 1/ tanh($number);
}


@function log($number) {
  @return $number; 
}

@function ln($number) {
//  $value: $number;
//  $key: 3;
//  
//  @for $i from 1 through $iter {
//    $value: $value + ( exponent($number, $key) / factorial($key) );
//  }
//  $value: 2 * $value;
//  @debug $value;
  @return $number; 
}


//////////////////////////////
// Degree/Radian Conversion
//////////////////////////////
@function deg-to-rad($number) {
  @return $number * $pi / 180deg; 
}

@function rad-to-deg($number) {
  @return $number * 180deg / $pi; 
}

//////////////////////////////
// Root Functions
//////////////////////////////
// Basic General-Purpose Root Function
@function n-root($number, $n) {
  @if $number < 1 {
    @return ERROR;
    @warn ROOT ERROR; 
  }
  // If a whole number, generate it quickly
  @for $i from 1 through $number {
    @if exponent($i, $n) == $number {
      @return $i; 
    } 
  }
  // Else, run through other options
  @for $i from 1 through $number * 1000 / 2 {
    @if round(exponent($i / 1000, $n) * 100) == round($number * 100) {
      @return $i / 1000; 
    } 
  } 
}

// Square Roots
@function √($number) {
  @return n-root($number, 2); 
}

@function root($number) {
  @return n-root($number, 2); 
}

@function sqrt($number) {
  @return n-root($number, 2); 
}

//////////////////////////////
// Export Test
//////////////////////////////
.foo {
  width: √(9);
  width: √(9) * √(9);
  width: deg-to-rad(90deg);
  width: factorial(9);
  -webkit-transform: rotate(rad-to-deg($pi / 2));
  width: sin($pi / 4); 
  width: sin(10);
  width: cos($pi / 2); 
  width: cos(10);
  width: ln(.5);
}
